#include <bits/stdc++.h>
using namespace std;

class node {
    public:
	int data;
	node* left;
	node* right;
	node(int data)
	{
		this->data = data;
		left = NULL;
		right = NULL;
	}
};

void print(node* parent)
{
	node* curr = parent;
	node*prev=curr;
	while (curr != NULL){
	    cout << curr->data << " "; 
	    prev=curr;
	    curr = curr->right;
	}
	cout<<endl;
	
	while(prev!=NULL)
	{
	    cout<<prev->data<<" ";
	    prev=prev->left;
	}
	cout<<endl;
		
}


void inorder(node* curr, vector<int> &inorderVal)
{
	
	if (curr == NULL)
		return;
	inorder(curr->left, inorderVal);
	inorderVal.push_back(curr->data);
	inorder(curr->right, inorderVal);
}


node* flatten(node* parent)
{
	vector<int>inorderVal;
	inorder(parent,inorderVal);
	int n=inorderVal.size();
	sort(inorderVal.begin(),inorderVal.end());
	node* a = new node(inorderVal[0]);
    node* curr=a;
    for(int i=1;i<n;i++)
    {
        node* temp=new node(inorderVal[i]);
        curr->right=temp;
        temp->left=curr;
        curr=temp;
    }
    
    curr->right=NULL;
	
	return a;
}


int main()
{
	node* root = new node(5);
	root->left = new node(3);
	root->right = new node(7);
	root->left->left = new node(10);
	root->left->right = new node(4);
	root->right->left = new node(6);
	root->right->right = new node(8);

	
	print(flatten(root));

	return 0;
}
